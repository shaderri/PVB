import asyncio
import aiohttp
import logging
import os
import threading
from datetime import datetime
from typing import Dict, Optional
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode
from flask import Flask, jsonify
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –§–æ—Ä–º–∞—Ç: @channel_username –∏–ª–∏ -100xxxxx –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
API_URL = "https://plantsvsbrainrotsstocktracker.com/api/stock?since=1759075506296"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "30"))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
ITEMS_DATA = {
    # –°–µ–º–µ–Ω–∞
    "Cactus": {"emoji": "üåµ", "price": "$200", "category": "seed"},
    "Strawberry": {"emoji": "üçì", "price": "$1,250", "category": "seed"},
    "Pumpkin": {"emoji": "üéÉ", "price": "$5,000", "category": "seed"},
    "Sunflower": {"emoji": "üåª", "price": "$25,000", "category": "seed"},
    "Dragon Fruit": {"emoji": "üêâ", "price": "$100k", "category": "seed"},
    "Eggplant": {"emoji": "üçÜ", "price": "$250k", "category": "seed"},
    "Watermelon": {"emoji": "üçâ", "price": "$1m", "category": "seed"},
    "Cocotank": {"emoji": "ü••", "price": "$5m", "category": "seed"},
    "Carnivorous Plant": {"emoji": "ü™¥", "price": "$25m", "category": "seed"},
    "Mr Carrot": {"emoji": "ü•ï", "price": "$50m", "category": "seed"},
    "Tomatrio": {"emoji": "üçÖ", "price": "$125m", "category": "seed"},
    "Shroombino": {"emoji": "üçÑ", "price": "$200m", "category": "seed"},

    # –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    "Bat": {"emoji": "üèè", "price": "Free", "category": "gear"},
    "Water Bucket": {"emoji": "ü™£", "price": "$7,500", "category": "gear"},
    "Frost Grenade": {"emoji": "‚ùÑÔ∏è", "price": "$12,500", "category": "gear"},
    "Frost grenade": {"emoji": "‚ùÑÔ∏è", "price": "$12,500", "category": "gear"},
    "Banana Gun": {"emoji": "üçå", "price": "$25,000", "category": "gear"},
    "Frost Blower": {"emoji": "üå¨Ô∏è", "price": "$125,000", "category": "gear"},
    "Lucky Potion": {"emoji": "üçÄ", "price": "TBD", "category": "gear"},
    "Speed Potion": {"emoji": "‚ö°", "price": "TBD", "category": "gear"},
    "Carrot Launcher": {"emoji": "ü•ï", "price": "$500,000", "category": "gear"}
}

# –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_ITEMS = ["Mr Carrot", "Tomatrio", "Shroombino"]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–∫–∞
last_stock_state = {}

class StockTracker:
    def __init__(self):
        self.session = None
        self.bot = None

    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

    async def fetch_stock(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ"""
        try:
            await self.init_session()
            async with self.session.get(API_URL, timeout=10) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {e}")
            return None

    def format_stock_message(self, stock_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–æ–∫–µ"""
        if not stock_data or 'data' not in stock_data:
            return "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ*"

        seeds = []
        gear = []

        for item in stock_data['data']:
            name = item.get('name', '')
            stock_count = item.get('stock', 0)
            available = item.get('available', False)
            category = item.get('category', '')

            if not available or stock_count == 0:
                continue

            item_info = ITEMS_DATA.get(name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']
            price = item_info['price']

            formatted_item = f"{emoji} *{name}*: x{stock_count} ({price})"

            if category == 'SEEDS':
                seeds.append(formatted_item)
            elif category == 'GEAR':
                gear.append(formatted_item)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = "üìä *–¢–ï–ö–£–©–ò–ô –°–¢–û–ö*\n\n"

        if seeds:
            message += "üå± *–°–ï–ú–ï–ù–ê:*\n"
            message += "\n".join(seeds) + "\n\n"
        else:
            message += "üå± *–°–ï–ú–ï–ù–ê:* _–ü—É—Å—Ç–æ_\n\n"

        if gear:
            message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:*\n"
            message += "\n".join(gear) + "\n\n"
        else:
            message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:* _–ü—É—Å—Ç–æ_\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz).strftime("%H:%M:%S")
        message += f"üïí _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} –ú–°–ö_"

        return message

    async def check_for_notifications(self, stock_data: Dict, bot: Bot, channel_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        global last_stock_state

        if not stock_data or 'data' not in stock_data or not channel_id:
            return

        current_stock = {}
        for item in stock_data['data']:
            name = item.get('name', '')
            stock_count = item.get('stock', 0)
            available = item.get('available', False)

            if available and stock_count > 0:
                current_stock[name] = stock_count

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for item_name in NOTIFICATION_ITEMS:
            if item_name in current_stock:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å—Ç–æ–∫–µ –∏–ª–∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
                if item_name not in last_stock_state or current_stock[item_name] > last_stock_state.get(item_name, 0):
                    await self.send_notification(bot, channel_id, item_name, current_stock[item_name])

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        last_stock_state = current_stock

    async def send_notification(self, bot: Bot, channel_id: str, item_name: str, count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']

            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz).strftime("%H:%M")

            channel_mention = channel_id if channel_id and channel_id.startswith('@') else channel_id

            message = (
                f"{emoji} *{item_name}: x{count} –≤ —Å—Ç–æ–∫–µ!*\n"
                f"üïí {current_time} –ú–°–ö\n\n"
                f"{channel_mention or ''}"
            )

            await bot.send_message(
                chat_id=channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {item_name} –≤ {channel_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker = StockTracker()

async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stock"""
    await update.message.reply_text("‚è≥ *–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ...*", parse_mode=ParseMode.MARKDOWN)

    stock_data = await tracker.fetch_stock()
    message = tracker.format_stock_message(stock_data)

    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    channel_info = f"üîî –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {CHANNEL_ID}\n" if CHANNEL_ID else "üîï –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"

    welcome_message = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants vs Brainrots Stock Tracker!*\n\n"
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stock —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n\n"
        f"{channel_info}"
        "üì¶ –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
        "‚Ä¢ ü•ï Mr Carrot ($50m)\n"
        "‚Ä¢ üçÖ Tomatrio ($125m)\n"
        "‚Ä¢ üçÑ Shroombino ($200m)\n\n"
        f"_–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∫ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥_"
    )
    await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/stock - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö!"
    )
    await update.message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)

async def periodic_stock_check(application: Application):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞"""
    bot = application.bot

    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL} —Å–µ–∫)")
    if CHANNEL_ID:
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤: {CHANNEL_ID}")
    else:
        logger.info("–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    while True:
        try:
            stock_data = await tracker.fetch_stock()
            if stock_data and CHANNEL_ID:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                await tracker.check_for_notifications(stock_data, bot, CHANNEL_ID)

            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            await asyncio.sleep(CHECK_INTERVAL)

async def post_init(application: Application):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    asyncio.create_task(periodic_stock_check(application))

# --- Flask —á–∞—Å—Ç—å (–¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ / keep-alive) ---
flask_app = Flask(__name__)

@flask_app.route("/", methods=["GET"])
@flask_app.route("/ping", methods=["GET"])
def ping():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ‚Äî –ø–∏–Ω–≥–µ—Ä –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å –∂–∏–≤—ã–º
    return jsonify({"status": "ok", "time": datetime.utcnow().isoformat() + "Z"}), 200

def run_flask():
    port = int(os.getenv("PORT", "5000"))
    # —Ä–µ–∫–æ–º: –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gunicorn/uvicorn; –¥–ª—è Render –ø—Ä–æ—Å—Ç–æ–≥–æ Flask.run –±—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ 0.0.0.0:{port}")
    flask_app.run(host="0.0.0.0", port=port, threaded=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ Flask"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π –ø–∏–Ω–≥–µ—Ä –º–æ–≥ –¥–µ—Ä–≥–∞—Ç—å /ping
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stock", stock_command))
    application.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    application.post_init = post_init

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
