import asyncio
import aiohttp
import logging
import os
import threading
from datetime import datetime, timedelta
from typing import Dict, Optional, Set
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode
from flask import Flask, jsonify
import pytz
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –§–æ—Ä–º–∞—Ç: @channel_username –∏–ª–∏ -100xxxxx
API_URL = os.getenv("API_URL", "https://plantsvsbrainrotsstocktracker.com/api/stock?since=1759075506296")

# –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + 6 —Å–µ–∫—É–Ω–¥
CHECK_INTERVAL_MINUTES = 5
CHECK_DELAY_SECONDS = 6  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
ITEMS_DATA = {
    # –°–µ–º–µ–Ω–∞
    "Cactus": {"emoji": "üåµ", "price": "$200", "category": "seed"},
    "Strawberry": {"emoji": "üçì", "price": "$1,250", "category": "seed"},
    "Pumpkin": {"emoji": "üéÉ", "price": "$5,000", "category": "seed"},
    "Sunflower": {"emoji": "üåª", "price": "$25,000", "category": "seed"},
    "Dragon Fruit": {"emoji": "üêâ", "price": "$100k", "category": "seed"},
    "Eggplant": {"emoji": "üçÜ", "price": "$250k", "category": "seed"},
    "Watermelon": {"emoji": "üçâ", "price": "$1m", "category": "seed"},
    "Cocotank": {"emoji": "ü••", "price": "$5m", "category": "seed"},
    "Carnivorous Plant": {"emoji": "ü™¥", "price": "$25m", "category": "seed"},
    "Mr Carrot": {"emoji": "ü•ï", "price": "$50m", "category": "seed"},
    "Tomatrio": {"emoji": "üçÖ", "price": "$125m", "category": "seed"},
    "Shroombino": {"emoji": "üçÑ", "price": "$200m", "category": "seed"},

    # –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    "Bat": {"emoji": "üèè", "price": "Free", "category": "gear"},
    "Water Bucket": {"emoji": "ü™£", "price": "$7,500", "category": "gear"},
    "Frost Grenade": {"emoji": "‚ùÑÔ∏è", "price": "$12,500", "category": "gear"},
    "Frost grenade": {"emoji": "‚ùÑÔ∏è", "price": "$12,500", "category": "gear"},
    "Banana Gun": {"emoji": "üçå", "price": "$25,000", "category": "gear"},
    "Frost Blower": {"emoji": "üå¨Ô∏è", "price": "$125,000", "category": "gear"},
    "Lucky Potion": {"emoji": "üçÄ", "price": "TBD", "category": "gear"},
    "Speed Potion": {"emoji": "‚ö°", "price": "TBD", "category": "gear"},
    "Carrot Launcher": {"emoji": "ü•ï", "price": "$500,000", "category": "gear"}
}

# –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_ITEMS = ["Mr Carrot", "Tomatrio", "Shroombino"]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–∫–∞
last_stock_state: Dict[str, int] = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
last_notification_time: Dict[str, datetime] = {}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –æ–¥–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
NOTIFICATION_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç


def get_next_check_time() -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + 6 —Å–µ–∫—É–Ω–¥)"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É, –∫—Ä–∞—Ç–Ω—É—é 5
    current_minute = now.minute
    next_minute = ((current_minute // CHECK_INTERVAL_MINUTES) + 1) * CHECK_INTERVAL_MINUTES
    
    if next_minute >= 60:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        next_check = now.replace(minute=0, second=CHECK_DELAY_SECONDS, microsecond=0) + timedelta(hours=1)
    else:
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Å–µ
        next_check = now.replace(minute=next_minute, second=CHECK_DELAY_SECONDS, microsecond=0)
    
    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 5 –º–∏–Ω—É—Ç
    if next_check <= now:
        next_check += timedelta(minutes=CHECK_INTERVAL_MINUTES)
    
    return next_check


def calculate_sleep_time() -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    next_check = get_next_check_time()
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    sleep_seconds = (next_check - now).total_seconds()
    return max(sleep_seconds, 0)


class StockTracker:
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None

    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp —Å–µ—Å—Å–∏–∏"""
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()

    async def fetch_stock(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ"""
        try:
            await self.init_session()
            async with self.session.get(API_URL, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ: {len(data.get('data', []))} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    return data
                else:
                    logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {e}")
            return None

    def format_stock_message(self, stock_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–æ–∫–µ"""
        if not stock_data or 'data' not in stock_data:
            return "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ*"

        seeds = []
        gear = []

        for item in stock_data['data']:
            name = item.get('name', '')
            stock_count = item.get('stock', 0)
            available = item.get('available', False)
            category = item.get('category', '')

            if not available or stock_count == 0:
                continue

            item_info = ITEMS_DATA.get(name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']
            price = item_info['price']

            formatted_item = f"{emoji} *{name}*: x{stock_count} ({price})"

            if category == 'SEEDS':
                seeds.append(formatted_item)
            elif category == 'GEAR':
                gear.append(formatted_item)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = "üìä *–¢–ï–ö–£–©–ò–ô –°–¢–û–ö*\n\n"
        
        if seeds:
            message += "üå± *–°–ï–ú–ï–ù–ê:*\n"
            message += "\n".join(seeds) + "\n\n"
        else:
            message += "üå± *–°–ï–ú–ï–ù–ê:* _–ü—É—Å—Ç–æ_\n\n"

        if gear:
            message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:*\n"
            message += "\n".join(gear) + "\n\n"
        else:
            message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:* _–ü—É—Å—Ç–æ_\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz).strftime("%H:%M:%S")
        except Exception:
            current_time = datetime.utcnow().strftime("%H:%M:%S")
        
        message += f"üïí _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} –ú–°–ö_"

        return message

    def can_send_notification(self, item_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (cooldown)"""
        if item_name not in last_notification_time:
            return True
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        last_time = last_notification_time[item_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if (now - last_time).total_seconds() >= NOTIFICATION_COOLDOWN:
            return True
        
        return False

    async def check_for_notifications(self, stock_data: Dict, bot: Bot, channel_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        global last_stock_state

        if not stock_data or 'data' not in stock_data or not channel_id:
            return

        current_stock = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ
        for item in stock_data['data']:
            name = item.get('name', '')
            stock_count = item.get('stock', 0)
            available = item.get('available', False)

            if available and stock_count > 0:
                current_stock[name] = stock_count

        logger.info(f"üì¶ –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {current_stock}")
        logger.info(f"üìù –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫: {last_stock_state}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for item_name in NOTIFICATION_ITEMS:
            current_count = current_stock.get(item_name, 0)
            previous_count = last_stock_state.get(item_name, 0)
            
            # –£–°–õ–û–í–ò–Ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
            # 1. –ü—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å—Ç–æ–∫–µ (–±—ã–ª 0, —Å—Ç–∞–ª > 0)
            # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
            # 3. –ü—Ä–æ—à–µ–ª cooldown —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            should_notify = False
            
            if current_count > 0:
                if previous_count == 0:
                    # –ü—Ä–µ–¥–º–µ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è
                    should_notify = True
                    logger.info(f"üÜï {item_name} –ø–æ—è–≤–∏–ª—Å—è –≤ —Å—Ç–æ–∫–µ! (0 -> {current_count})")
                elif current_count > previous_count:
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
                    should_notify = True
                    logger.info(f"üìà {item_name} —É–≤–µ–ª–∏—á–∏–ª—Å—è! ({previous_count} -> {current_count})")
            
            if should_notify and self.can_send_notification(item_name):
                await self.send_notification(bot, channel_id, item_name, current_count)
            elif should_notify and not self.can_send_notification(item_name):
                logger.info(f"‚è≥ {item_name}: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ (cooldown)")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        last_stock_state = current_stock.copy()

    async def send_notification(self, bot: Bot, channel_id: str, item_name: str, count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']
            price = item_info['price']

            try:
                moscow_tz = pytz.timezone('Europe/Moscow')
                current_time = datetime.now(moscow_tz).strftime("%H:%M:%S")
            except Exception:
                current_time = datetime.utcnow().strftime("%H:%M:%S")

            message = (
                f"üö® *–†–ï–î–ö–ò–ô –ü–†–ï–î–ú–ï–¢ –í –°–¢–û–ö–ï!* üö®\n\n"
                f"{emoji} *{item_name}*\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{count}*\n"
                f"üí∞ –¶–µ–Ω–∞: {price}\n"
                f"üïí {current_time} –ú–°–ö"
            )

            await bot.send_message(
                chat_id=channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            moscow_tz = pytz.timezone('Europe/Moscow')
            last_notification_time[item_name] = datetime.now(moscow_tz)
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item_name} x{count} -> {channel_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker = StockTracker()


async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stock"""
    if update.effective_message:
        await update.effective_message.reply_text("‚è≥ *–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ...*", parse_mode=ParseMode.MARKDOWN)

    stock_data = await tracker.fetch_stock()
    message = tracker.format_stock_message(stock_data)

    if update.effective_message:
        await update.effective_message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    channel_info = f"üîî –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {CHANNEL_ID}" if CHANNEL_ID else "üîï –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    welcome_message = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants vs Brainrots Stock Tracker!*\n\n"
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stock —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n\n"
        f"{channel_info}\n\n"
        "üì¶ *–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n"
        "‚Ä¢ ü•ï Mr Carrot ($50m)\n"
        "‚Ä¢ üçÖ Tomatrio ($125m)\n"
        "‚Ä¢ üçÑ Shroombino ($200m)\n\n"
        f"‚è±Ô∏è _–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∫ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç + {CHECK_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥_\n"
        f"_(–Ω–∞–ø—Ä–∏–º–µ—Ä: 13:05:06, 13:10:06, 13:15:06)_"
    )
    if update.effective_message:
        await update.effective_message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/stock - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö!"
    )
    if update.effective_message:
        await update.effective_message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)


async def periodic_stock_check(application: Application):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    bot = application.bot

    moscow_tz = pytz.timezone('Europe/Moscow')
    
    logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
    logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç + {CHECK_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: 13:05:06, 13:10:06, 13:15:06")
    
    if CHANNEL_ID:
        logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤: {CHANNEL_ID}")
    else:
        logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    initial_sleep = calculate_sleep_time()
    next_check = get_next_check_time()
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {initial_sleep:.1f} —Å–µ–∫ (—Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_check.strftime('%H:%M:%S')})")
    await asyncio.sleep(initial_sleep)

    while True:
        try:
            now = datetime.now(moscow_tz)
            logger.info(f"\n{'='*50}")
            logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –°–¢–û–ö–ê - {now.strftime('%H:%M:%S')} –ú–°–ö")
            logger.info(f"{'='*50}")
            
            stock_data = await tracker.fetch_stock()
            
            if stock_data and CHANNEL_ID:
                await tracker.check_for_notifications(stock_data, bot, CHANNEL_ID)
            elif not CHANNEL_ID:
                logger.warning("‚ö†Ô∏è CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            sleep_time = calculate_sleep_time()
            next_check = get_next_check_time()
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_check.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ {sleep_time:.1f} —Å–µ–∫)")
            logger.info(f"{'='*50}\n")
            
            await asyncio.sleep(sleep_time)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}", exc_info=True)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            await asyncio.sleep(calculate_sleep_time())


async def post_init(application: Application):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    asyncio.create_task(periodic_stock_check(application))


# --- Flask —á–∞—Å—Ç—å (–¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ / keep-alive) ---
flask_app = Flask(__name__)


@flask_app.route("/", methods=["GET"])
@flask_app.route("/ping", methods=["GET"])
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ Render"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    next_check = get_next_check_time()
    
    return jsonify({
        "status": "ok",
        "time": datetime.utcnow().isoformat() + "Z",
        "moscow_time": now.strftime("%H:%M:%S"),
        "next_check": next_check.strftime("%H:%M:%S"),
        "bot": "Plants vs Brainrots Stock Tracker"
    }), 200


@flask_app.route("/health", methods=["GET"])
def health():
    """Healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({"status": "healthy"}), 200


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.getenv("PORT", "5000"))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 0.0.0.0:{port}")
    flask_app.run(host="0.0.0.0", port=port, threaded=True, use_reloader=False)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ Flask"""
    logger.info("="*60)
    logger.info("üå± Plants vs Brainrots Stock Tracker Bot")
    logger.info("="*60)

    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ Render
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stock", stock_command))
    application.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    application.post_init = post_init

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è graceful shutdown –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è aiohttp —Å–µ—Å—Å–∏–∏
    async def shutdown_callback(app: Application):
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –∑–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏")
        try:
            await tracker.close_session()
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ aiohttp —Å–µ—Å—Å–∏–∏: {e}")

    application.post_shutdown = shutdown_callback

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("="*60)
    application.run_polling(allowed_updates=None)


if __name__ == "__main__":
    main()