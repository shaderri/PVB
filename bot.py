import asyncio
import aiohttp
import logging
import os
import threading
import json
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Set
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from flask import Flask, jsonify, request
import pytz
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# Supabase API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SUPABASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/game_stock"
SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZleHRiemF0cHBybmtzeXV0YmNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NjYzMTIsImV4cCI6MjA2OTQ0MjMxMn0.apcPdBL5o-t5jK68d9_r9C7m-8H81NQbTXK0EW0o800"

SEEDS_API_URL = f"{SUPABASE_URL}?select=*&game=eq.plantsvsbrainrots&type=eq.seeds&active=eq.true&order=created_at.desc"
GEAR_API_URL = f"{SUPABASE_URL}?select=*&game=eq.plantsvsbrainrots&type=eq.gear&active=eq.true&order=created_at.desc"

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + 15 —Å–µ–∫—É–Ω–¥
CHECK_INTERVAL_MINUTES = 5
CHECK_DELAY_SECONDS = 15

# –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤
TEST_USER_ID = 7177110883

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
ITEMS_DATA = {
    # –°–µ–º–µ–Ω–∞
    "Cactus": {"emoji": "üåµ", "price": "$200", "category": "seed"},
    "Strawberry": {"emoji": "üçì", "price": "$1,250", "category": "seed"},
    "Pumpkin": {"emoji": "üéÉ", "price": "$5,000", "category": "seed"},
    "Sunflower": {"emoji": "üåª", "price": "$25,000", "category": "seed"},
    "Dragon Fruit": {"emoji": "üêâ", "price": "$100k", "category": "seed"},
    "Eggplant": {"emoji": "üçÜ", "price": "$250k", "category": "seed"},
    "Watermelon": {"emoji": "üçâ", "price": "$1m", "category": "seed"},
    "Grape": {"emoji": "üçá", "price": "$2.5m", "category": "seed"},
    "Cocotank": {"emoji": "ü••", "price": "$5m", "category": "seed"},
    "Carnivorous Plant": {"emoji": "ü™¥", "price": "$25m", "category": "seed"},
    "Mr Carrot": {"emoji": "ü•ï", "price": "$50m", "category": "seed"},
    "Tomatrio": {"emoji": "üçÖ", "price": "$125m", "category": "seed"},
    "Shroombino": {"emoji": "üçÑ", "price": "$200m", "category": "seed"},

    # –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    "Bat": {"emoji": "üèè", "price": "Free", "category": "gear"},
    "Water Bucket": {"emoji": "ü™£", "price": "$7,500", "category": "gear"},
    "Frost Grenade": {"emoji": "‚ùÑÔ∏è", "price": "$12,500", "category": "gear"},
    "Banana Gun": {"emoji": "üçå", "price": "$25,000", "category": "gear"},
    "Frost Blower": {"emoji": "üå¨Ô∏è", "price": "$125,000", "category": "gear"},
    "Lucky Potion": {"emoji": "üçÄ", "price": "TBD", "category": "gear"},
    "Speed Potion": {"emoji": "‚ö°", "price": "TBD", "category": "gear"},
    "Carrot Launcher": {"emoji": "ü•ï", "price": "$500,000", "category": "gear"}
}

# –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
NOTIFICATION_ITEMS = ["Mr Carrot", "Tomatrio", "Shroombino"]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–∫–∞
last_stock_state: Dict[str, int] = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
last_notification_time: Dict[str, datetime] = {}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –æ–¥–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
NOTIFICATION_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: set(item_names)}
user_autostocks: Dict[int, Set[str]] = {}

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤
AUTOSTOCKS_FILE = "autostocks.json"


def load_autostocks():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_autostocks
    try:
        if os.path.exists(AUTOSTOCKS_FILE):
            with open(AUTOSTOCKS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ set
                user_autostocks = {int(k): set(v) for k, v in data.items()}
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ—Å—Ç–æ–∫–∏ –¥–ª—è {len(user_autostocks)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤: {e}")
        user_autostocks = {}


def save_autostocks():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ list –¥–ª—è JSON
        data = {k: list(v) for k, v in user_autostocks.items()}
        with open(AUTOSTOCKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Å—Ç–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤: {e}")


def get_next_check_time() -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + 15 —Å–µ–∫—É–Ω–¥)"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    
    current_minute = now.minute
    next_minute = ((current_minute // CHECK_INTERVAL_MINUTES) + 1) * CHECK_INTERVAL_MINUTES
    
    if next_minute >= 60:
        next_check = now.replace(minute=0, second=CHECK_DELAY_SECONDS, microsecond=0) + timedelta(hours=1)
    else:
        next_check = now.replace(minute=next_minute, second=CHECK_DELAY_SECONDS, microsecond=0)
    
    if next_check <= now:
        next_check += timedelta(minutes=CHECK_INTERVAL_MINUTES)
    
    return next_check


def calculate_sleep_time() -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    next_check = get_next_check_time()
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    sleep_seconds = (next_check - now).total_seconds()
    return max(sleep_seconds, 0)


class StockTracker:
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.is_running = False

    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp —Å–µ—Å—Å–∏–∏"""
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()

    async def fetch_supabase_api(self, url: str) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase API"""
        try:
            await self.init_session()
            headers = {
                "apikey": SUPABASE_API_KEY,
                "Authorization": f"Bearer {SUPABASE_API_KEY}"
            }
            
            async with self.session.get(url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    async def fetch_stock(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ –∏–∑ –æ–±–æ–∏—Ö API (seeds + gear)"""
        try:
            seeds_task = self.fetch_supabase_api(SEEDS_API_URL)
            gear_task = self.fetch_supabase_api(GEAR_API_URL)
            
            seeds_data, gear_data = await asyncio.gather(seeds_task, gear_task)
            
            if seeds_data is None and gear_data is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ API")
                return None
            
            combined_data = []
            
            if seeds_data:
                combined_data.extend(seeds_data)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–µ–º—è–Ω: {len(seeds_data)}")
            
            if gear_data:
                combined_data.extend(gear_data)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: {len(gear_data)}")
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å—Ç–æ–∫–µ: {len(combined_data)}")
            
            return {"data": combined_data}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def format_stock_message(self, stock_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–æ–∫–µ"""
        if not stock_data or 'data' not in stock_data:
            return "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ*"

        seeds = []
        gear = []

        for item in stock_data['data']:
            display_name = item.get('display_name', '')
            multiplier = item.get('multiplier', 0)
            item_type = item.get('type', '')

            if not display_name or multiplier == 0:
                continue

            item_info = ITEMS_DATA.get(display_name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']
            price = item_info['price']

            formatted_item = f"{emoji} *{display_name}*: x{multiplier} ({price})"

            if item_type == 'seeds':
                seeds.append(formatted_item)
            elif item_type == 'gear':
                gear.append(formatted_item)

        message = "üìä *–¢–ï–ö–£–©–ò–ô –°–¢–û–ö*\n\n"
        
        if seeds:
            message += "üå± *–°–ï–ú–ï–ù–ê:*\n"
            message += "\n".join(seeds) + "\n\n"
        else:
            message += "üå± *–°–ï–ú–ï–ù–ê:* _–ü—É—Å—Ç–æ_\n\n"

        if gear:
            message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:*\n"
            message += "\n".join(gear) + "\n\n"
        else:
            message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:* _–ü—É—Å—Ç–æ_\n\n"

        try:
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz).strftime("%H:%M:%S")
        except Exception:
            current_time = datetime.utcnow().strftime("%H:%M:%S")
        
        message += f"üïí _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} –ú–°–ö_"

        return message

    def can_send_notification(self, item_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (cooldown)"""
        if item_name not in last_notification_time:
            return True
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        last_time = last_notification_time[item_name]
        
        if (now - last_time).total_seconds() >= NOTIFICATION_COOLDOWN:
            return True
        
        return False

    async def check_for_notifications(self, stock_data: Dict, bot: Bot, channel_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª"""
        global last_stock_state

        if not stock_data or 'data' not in stock_data or not channel_id:
            return

        current_stock = {}
        
        for item in stock_data['data']:
            display_name = item.get('display_name', '')
            multiplier = item.get('multiplier', 0)

            if display_name and multiplier > 0:
                current_stock[display_name] = multiplier

        logger.info(f"üì¶ –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {current_stock}")
        logger.info(f"üìù –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫: {last_stock_state}")

        for item_name in NOTIFICATION_ITEMS:
            current_count = current_stock.get(item_name, 0)
            previous_count = last_stock_state.get(item_name, 0)
            
            should_notify = False
            
            if current_count > 0:
                if previous_count == 0:
                    should_notify = True
                    logger.info(f"üÜï {item_name} –ø–æ—è–≤–∏–ª—Å—è –≤ —Å—Ç–æ–∫–µ! (0 -> {current_count})")
                elif current_count > previous_count:
                    should_notify = True
                    logger.info(f"üìà {item_name} —É–≤–µ–ª–∏—á–∏–ª—Å—è! ({previous_count} -> {current_count})")
            
            if should_notify and self.can_send_notification(item_name):
                await self.send_notification(bot, channel_id, item_name, current_count)
            elif should_notify and not self.can_send_notification(item_name):
                logger.info(f"‚è≥ {item_name}: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ (cooldown)")

        last_stock_state = current_stock.copy()

    async def check_user_autostocks(self, stock_data: Dict, bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not stock_data or 'data' not in stock_data:
            return

        current_stock = {}
        for item in stock_data['data']:
            display_name = item.get('display_name', '')
            multiplier = item.get('multiplier', 0)
            if display_name and multiplier > 0:
                current_stock[display_name] = multiplier

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å—Ç–æ–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, tracked_items in user_autostocks.items():
            for item_name in tracked_items:
                if item_name in current_stock:
                    await self.send_autostock_notification(bot, user_id, item_name, current_stock[item_name])

    async def send_notification(self, bot: Bot, channel_id: str, item_name: str, count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']
            price = item_info['price']

            try:
                moscow_tz = pytz.timezone('Europe/Moscow')
                current_time = datetime.now(moscow_tz).strftime("%H:%M:%S")
            except Exception:
                current_time = datetime.utcnow().strftime("%H:%M:%S")

            message = (
                f"üö® *–†–ï–î–ö–ò–ô –ü–†–ï–î–ú–ï–¢ –í –°–¢–û–ö–ï!* üö®\n\n"
                f"{emoji} *{item_name}*\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{count}*\n"
                f"üí∞ –¶–µ–Ω–∞: {price}\n"
                f"üïí {current_time} –ú–°–ö"
            )

            await bot.send_message(
                chat_id=channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            
            moscow_tz = pytz.timezone('Europe/Moscow')
            last_notification_time[item_name] = datetime.now(moscow_tz)
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item_name} x{count} -> {channel_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def send_autostock_notification(self, bot: Bot, user_id: int, item_name: str, count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∞–≤—Ç–æ—Å—Ç–æ–∫–µ"""
        try:
            item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
            emoji = item_info['emoji']
            price = item_info['price']

            try:
                moscow_tz = pytz.timezone('Europe/Moscow')
                current_time = datetime.now(moscow_tz).strftime("%H:%M:%S")
            except Exception:
                current_time = datetime.utcnow().strftime("%H:%M:%S")

            message = (
                f"üîî *–ê–í–¢–û–°–¢–û–ö - {item_name} –í –ù–ê–õ–ò–ß–ò–ò!*\n\n"
                f"{emoji} *{item_name}*\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{count}*\n"
                f"üí∞ –¶–µ–Ω–∞: {price}\n"
                f"üïí {current_time} –ú–°–ö"
            )

            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Å—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item_name} x{count} -> user {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ—Å—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker = StockTracker()


async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stock"""
    stock_data = await tracker.fetch_stock()
    message = tracker.format_stock_message(stock_data)

    if update.effective_message:
        await update.effective_message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


async def autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /autostock - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏"""
    if not update.effective_user:
        return
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if user_id != TEST_USER_ID:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ê–≤—Ç–æ—Å—Ç–æ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º—É –∫—Ä—É–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("üå± –°–µ–º–µ–Ω–∞", callback_data="autostock_seeds")],
        [InlineKeyboardButton("‚öîÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="autostock_gear")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–∏", callback_data="autostock_list")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–æ–∫–µ.\n\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ :15 —Å–µ–∫—É–Ω–¥"
    )
    
    await update.effective_message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def autostock_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == "autostock_seeds":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–º—è–Ω
        keyboard = []
        for item_name, item_info in ITEMS_DATA.items():
            if item_info['category'] == 'seed':
                emoji = item_info['emoji']
                is_tracking = user_id in user_autostocks and item_name in user_autostocks[user_id]
                status = "‚úÖ" if is_tracking else "‚ûï"
                keyboard.append([InlineKeyboardButton(
                    f"{status} {emoji} {item_name}",
                    callback_data=f"toggle_{item_name}"
                )])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autostock_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üå± *–°–ï–ú–ï–ù–ê*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "autostock_gear":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
        keyboard = []
        for item_name, item_info in ITEMS_DATA.items():
            if item_info['category'] == 'gear':
                emoji = item_info['emoji']
                is_tracking = user_id in user_autostocks and item_name in user_autostocks[user_id]
                status = "‚úÖ" if is_tracking else "‚ûï"
                keyboard.append([InlineKeyboardButton(
                    f"{status} {emoji} {item_name}",
                    callback_data=f"toggle_{item_name}"
                )])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autostock_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "autostock_list":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if user_id not in user_autostocks or not user_autostocks[user_id]:
            message = "üìã *–ú–û–ò –ê–í–¢–û–°–¢–û–ö–ò*\n\n_–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç_"
        else:
            tracked = user_autostocks[user_id]
            items_list = []
            for item_name in tracked:
                item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
                emoji = item_info['emoji']
                price = item_info['price']
                items_list.append(f"{emoji} *{item_name}* ({price})")
            
            message = f"üìã *–ú–û–ò –ê–í–¢–û–°–¢–û–ö–ò*\n\n" + "\n".join(items_list)
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="autostock_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif data == "autostock_back":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üå± –°–µ–º–µ–Ω–∞", callback_data="autostock_seeds")],
            [InlineKeyboardButton("‚öîÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="autostock_gear")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–∏", callback_data="autostock_list")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
        )
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif data.startswith("toggle_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        item_name = data.replace("toggle_", "")
        
        if user_id not in user_autostocks:
            user_autostocks[user_id] = set()
        
        if item_name in user_autostocks[user_id]:
            user_autostocks[user_id].remove(item_name)
            action = "—É–¥–∞–ª–µ–Ω –∏–∑"
        else:
            user_autostocks[user_id].add(item_name)
            action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"
        
        save_autostocks()
        
        item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶"})
        emoji = item_info['emoji']
        
        await query.answer(f"{emoji} {item_name} {action} –∞–≤—Ç–æ—Å—Ç–æ–∫–∏!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        category = item_info.get('category', '')
        if category == 'seed':
            await autostock_callback(update, context)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–º—è–Ω
        else:
            await autostock_callback(update, context)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    channel_info = f"üîî –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {CHANNEL_ID}" if CHANNEL_ID else "üîï –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    welcome_message = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants vs Brainrots Stock Tracker!*\n\n"
        "üìä /stock - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "üîî /autostock - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏\n"
        "‚ùì /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        f"{channel_info}\n\n"
        "üì¶ *–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n"
        "‚Ä¢ ü•ï Mr Carrot ($50m)\n"
        "‚Ä¢ üçÖ Tomatrio ($125m)\n"
        "‚Ä¢ üçÑ Shroombino ($200m)\n\n"
        f"‚è±Ô∏è _–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç + {CHECK_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥_"
    )
    if update.effective_message:
        await update.effective_message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = (
        "üìö *–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:*\n\n"
        "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/stock - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "/autostock - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–æ–∫–∏\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üí° *–ß–¢–û –¢–ê–ö–û–ï –ê–í–¢–û–°–¢–û–ö–ò?*\n"
        "–ê–≤—Ç–æ—Å—Ç–æ–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç—ã. "
        "–ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç–æ–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ :15 —Å–µ–∫—É–Ω–¥ (13:05:15, 13:10:15, –∏ —Ç.–¥.)"
    )
    if update.effective_message:
        await update.effective_message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)


async def periodic_stock_check(application: Application):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    bot = application.bot

    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    if tracker.is_running:
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    tracker.is_running = True
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
    logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç + {CHECK_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: 13:05:15, 13:10:15, 13:15:15")
    
    if CHANNEL_ID:
        logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤: {CHANNEL_ID}")
    else:
        logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    initial_sleep = calculate_sleep_time()
    next_check = get_next_check_time()
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {initial_sleep:.1f} —Å–µ–∫ (—Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_check.strftime('%H:%M:%S')})")
    await asyncio.sleep(initial_sleep)

    while tracker.is_running:
        try:
            now = datetime.now(moscow_tz)
            logger.info(f"\n{'='*50}")
            logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –°–¢–û–ö–ê - {now.strftime('%H:%M:%S')} –ú–°–ö")
            logger.info(f"{'='*50}")
            
            stock_data = await tracker.fetch_stock()
            
            if stock_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
                if CHANNEL_ID:
                    await tracker.check_for_notifications(stock_data, bot, CHANNEL_ID)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å—Ç–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await tracker.check_user_autostocks(stock_data, bot)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            sleep_time = calculate_sleep_time()
            next_check = get_next_check_time()
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_check.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ {sleep_time:.1f} —Å–µ–∫)")
            logger.info(f"{'='*50}\n")
            
            await asyncio.sleep(sleep_time)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}", exc_info=True)
            await asyncio.sleep(calculate_sleep_time())


async def post_init(application: Application):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Å—Ç–æ–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_autostocks()
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    asyncio.create_task(periodic_stock_check(application))


# --- Flask —á–∞—Å—Ç—å (–¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ / keep-alive) ---
flask_app = Flask(__name__)


@flask_app.route("/", methods=["GET", "HEAD"])
@flask_app.route("/ping", methods=["GET", "HEAD"])
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ Render (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ HEAD –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    if request.method == "HEAD":
        return "", 200
    
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    next_check = get_next_check_time()
    
    return jsonify({
        "status": "ok",
        "time": datetime.utcnow().isoformat() + "Z",
        "moscow_time": now.strftime("%H:%M:%S"),
        "next_check": next_check.strftime("%H:%M:%S"),
        "bot": "Plants vs Brainrots Stock Tracker",
        "is_running": tracker.is_running
    }), 200


@flask_app.route("/health", methods=["GET"])
def health():
    """Healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({"status": "healthy", "is_running": tracker.is_running}), 200


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.getenv("PORT", "5000"))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 0.0.0.0:{port}")
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ Flask –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    import logging as flask_logging
    flask_log = flask_logging.getLogger('werkzeug')
    flask_log.setLevel(flask_logging.ERROR)
    
    flask_app.run(host="0.0.0.0", port=port, threaded=True, use_reloader=False)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ Flask"""
    logger.info("="*60)
    logger.info("üå± Plants vs Brainrots Stock Tracker Bot")
    logger.info("="*60)

    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø–∏–Ω–≥–µ—Ä–∞ Render
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stock", stock_command))
    application.add_handler(CommandHandler("autostock", autostock_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(autostock_callback))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    application.post_init = post_init

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è graceful shutdown –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è aiohttp —Å–µ—Å—Å–∏–∏
    async def shutdown_callback(app: Application):
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        tracker.is_running = False
        
        logger.info("üõë –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤")
        save_autostocks()
        
        logger.info("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏")
        try:
            await tracker.close_session()
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ aiohttp —Å–µ—Å—Å–∏–∏: {e}")

    application.post_shutdown = shutdown_callback

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("="*60)
    application.run_polling(allowed_updates=None, drop_pending_updates=True)


if __name__ == "__main__":
    main()