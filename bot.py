import asyncio
import aiohttp
import logging
import os
import json
import hashlib
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Set
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram.constants import ParseMode, ChatType
from telegram.error import TelegramError
from flask import Flask, jsonify, request as flask_request
import pytz
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
REQUIRED_CHANNEL = "@PlantsVsBrain"

# Admin ID
ADMIN_ID = 7177110883

# Supabase API - –í–ê–®–ò —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SUPABASE_URL_BASE = os.getenv("SUPABASE_URL", "https://vgneaaqqqmdpkmeepvdp.supabase.co/rest/v1")
SUPABASE_API_KEY = os.getenv("SUPABASE_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZnbmVhYXFxcW1kcGttZWVwdmRwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1OTE1NjEsImV4cCI6MjA3NTE2NzU2MX0.uw7YbMCsAAk_PrOAa6lnc8Rwub9jGGkn6dtlLfJMB5w")

AUTOSTOCKS_URL = f"{SUPABASE_URL_BASE}/user_autostocks"
USERS_URL = f"{SUPABASE_URL_BASE}/bot_users"

# API –¥–ª—è —Å—Ç–æ–∫–∞ –∏–≥—Ä—ã - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
SUPABASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/game_stock"
SUPABASE_API_KEY_STOCK = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZleHRiemF0cHBybmtzeXV0YmNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NjYzMTIsImV4cCI6MjA2OTQ0MjMxMn0.apcPdBL5o-t5jK68d9_r9C7m-8H81NQbTXK0EW0o800"

SEEDS_API_URL = f"{SUPABASE_URL}?select=*&game=eq.plantsvsbrainrots&type=eq.seeds&active=eq.true&order=created_at.desc"
GEAR_API_URL = f"{SUPABASE_URL}?select=*&game=eq.plantsvsbrainrots&type=eq.gear&active=eq.true&order=created_at.desc"
WEATHER_API_URL = f"{SUPABASE_URL}?select=*&game=eq.plantsvsbrainrots&type=eq.weather&active=eq.true&order=created_at.desc"

CHECK_INTERVAL_MINUTES = 5
CHECK_DELAY_SECONDS = 15
COMMAND_COOLDOWN = 10
STOCK_CACHE_SECONDS = 25

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
BROADCAST_MESSAGE = 1

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logger.info(f"üîó Supabase (–∞–≤—Ç–æ—Å—Ç–æ–∫–∏): {SUPABASE_URL_BASE}")
logger.info(f"üîó API —Å—Ç–æ–∫–∞: {SUPABASE_URL}")
logger.info(f"üîë API Key: {SUPABASE_API_KEY_STOCK[:20]}...")

# –ü–æ–≥–æ–¥–∞
WEATHER_DATA = {
    "gold": {"emoji": "üåü", "name": "–ó–æ–ª–æ—Ç–∞—è"},
    "diamond": {"emoji": "üíé", "name": "–ê–ª–º–∞–∑–Ω–∞—è"},
    "frozen": {"emoji": "‚ùÑÔ∏è", "name": "–õ–µ–¥—è–Ω–∞—è"},
    "neon": {"emoji": "üåà", "name": "–ù–µ–æ–Ω–æ–≤–∞—è"},
    "rainbow": {"emoji": "üåà", "name": "–†–∞–¥—É–∂–Ω–∞—è"},
    "upsidedown": {"emoji": "üôÉ", "name": "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è"},
    "underworld": {"emoji": "üî•", "name": "–ü–æ–¥–∑–µ–º–Ω–∞—è"},
    "magma": {"emoji": "üåã", "name": "–ú–∞–≥–º–∞"},
    "galaxy": {"emoji": "üåå", "name": "–ì–∞–ª–∞–∫—Ç–∏–∫–∞"}
}

# –ü—Ä–µ–¥–º–µ—Ç—ã
ITEMS_DATA = {
    "Cactus": {"emoji": "üåµ", "price": "$200", "category": "seed"},
    "Strawberry": {"emoji": "üçì", "price": "$1,250", "category": "seed"},
    "Pumpkin": {"emoji": "üéÉ", "price": "$5,000", "category": "seed"},
    "Sunflower": {"emoji": "üåª", "price": "$25,000", "category": "seed"},
    "Dragon Fruit": {"emoji": "üêâ", "price": "$100k", "category": "seed"},
    "Eggplant": {"emoji": "üçÜ", "price": "$250k", "category": "seed"},
    "Watermelon": {"emoji": "üçâ", "price": "$1m", "category": "seed"},
    "Grape": {"emoji": "üçá", "price": "$2.5m", "category": "seed"},
    "Cocotank": {"emoji": "ü••", "price": "$5m", "category": "seed"},
    "Carnivorous Plant": {"emoji": "ü™¥", "price": "$25m", "category": "seed"},
    "Mr Carrot": {"emoji": "ü•ï", "price": "$50m", "category": "seed"},
    "Tomatrio": {"emoji": "üçÖ", "price": "$125m", "category": "seed"},
    "Shroombino": {"emoji": "üçÑ", "price": "$200m", "category": "seed"},
    "Mango": {"emoji": "ü•≠", "price": "$367m", "category": "seed"},
    "Bat": {"emoji": "üèè", "price": "Free", "category": "gear"},
    "Water Bucket": {"emoji": "ü™£", "price": "$7,500", "category": "gear"},
    "Frost Grenade": {"emoji": "‚ùÑÔ∏è", "price": "$12,500", "category": "gear"},
    "Banana Gun": {"emoji": "üçå", "price": "$25,000", "category": "gear"},
    "Frost Blower": {"emoji": "üå¨Ô∏è", "price": "$125,000", "category": "gear"},
    "Lucky Potion": {"emoji": "üçÄ", "price": "TBD", "category": "gear"},
    "Speed Potion": {"emoji": "‚ö°", "price": "TBD", "category": "gear"},
    "Carrot Launcher": {"emoji": "ü•ï", "price": "$500,000", "category": "gear"}
}

NOTIFICATION_ITEMS = ["Mr Carrot", "Tomatrio", "Shroombino", "Mango"]

last_stock_state: Dict[str, int] = {}
last_notification_time: Dict[str, datetime] = {}
NOTIFICATION_COOLDOWN = 300

user_cooldowns: Dict[int, Dict[str, datetime]] = {}

# –ö—ç—à –¥–ª—è —Å—Ç–æ–∫–∞
stock_cache: Optional[Dict] = None
stock_cache_time: Optional[datetime] = None

telegram_app: Optional[Application] = None

# ========== –§–ò–ö–°: –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö callback_data ==========
# NAME_TO_ID: –ø–æ–ª–Ω–æ–µ –∏–º—è ‚Üí –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID (‚â§ 64 –±–∞–π—Ç–∞)
# ID_TO_NAME: –æ–±—Ä–∞—Ç–Ω–æ–µ –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
NAME_TO_ID: Dict[str, str] = {}
ID_TO_NAME: Dict[str, str] = {}


def build_item_id_mappings():
    """
    –§–ò–ö–°: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ ID –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA1 hex (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ ID –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç 64 –±–∞–π—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
    """
    global NAME_TO_ID, ID_TO_NAME
    NAME_TO_ID.clear()
    ID_TO_NAME.clear()
    
    for item_name in ITEMS_DATA.keys():
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ SHA1 —Ö–µ—à–∞ –∏–º–µ–Ω–∏
        hash_obj = hashlib.sha1(item_name.encode('utf-8'))
        hash_hex = hash_obj.hexdigest()[:8]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID: "t_<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>_<—Ö–µ—à>"
        category = ITEMS_DATA[item_name]['category']
        safe_id = f"t_{category}_{hash_hex}"
        
        NAME_TO_ID[item_name] = safe_id
        ID_TO_NAME[safe_id] = item_name
        
    logger.info(f"‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω—ã –º–∞–ø–ø–∏–Ω–≥–∏: {len(NAME_TO_ID)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")


def get_moscow_time() -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(pytz.timezone('Europe/Moscow'))


def check_command_cooldown(user_id: int, command: str) -> tuple[bool, Optional[int]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–æ–∂–Ω–æ_–≤—ã–ø–æ–ª–Ω–∏—Ç—å, —Å–µ–∫—É–Ω–¥_–æ—Å—Ç–∞–ª–æ—Å—å)
    """
    if user_id not in user_cooldowns:
        user_cooldowns[user_id] = {}
    
    if command in user_cooldowns[user_id]:
        last_time = user_cooldowns[user_id][command]
        now = get_moscow_time()
        elapsed = (now - last_time).total_seconds()
        
        if elapsed < COMMAND_COOLDOWN:
            seconds_left = int(COMMAND_COOLDOWN - elapsed)
            return False, seconds_left
    
    user_cooldowns[user_id][command] = get_moscow_time()
    return True, None


async def check_subscription(user_id: int, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=REQUIRED_CHANNEL, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except TelegramError:
        return False


def get_next_check_time() -> datetime:
    """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    now = get_moscow_time()
    current_minute = now.minute
    next_minute = ((current_minute // CHECK_INTERVAL_MINUTES) + 1) * CHECK_INTERVAL_MINUTES
    
    if next_minute >= 60:
        next_check = now.replace(minute=0, second=CHECK_DELAY_SECONDS, microsecond=0) + timedelta(hours=1)
    else:
        next_check = now.replace(minute=next_minute, second=CHECK_DELAY_SECONDS, microsecond=0)
    
    if next_check <= now:
        next_check += timedelta(minutes=CHECK_INTERVAL_MINUTES)
    
    return next_check


def calculate_sleep_time() -> float:
    """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    next_check = get_next_check_time()
    now = get_moscow_time()
    sleep_seconds = (next_check - now).total_seconds()
    return max(sleep_seconds, 0)


class SupabaseDB:
    """–†–∞–±–æ—Ç–∞ —Å Supabase –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.headers = {
            "apikey": SUPABASE_API_KEY,
            "Authorization": f"Bearer {SUPABASE_API_KEY}",
            "Content-Type": "application/json",
            "Prefer": "return=minimal"
        }
    
    async def init_session(self):
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def save_user(self, user_id: int, username: Optional[str] = None, first_name: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        try:
            await self.init_session()
            data = {
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "last_seen": get_moscow_time().isoformat()
            }
            
            headers = self.headers.copy()
            headers["Prefer"] = "resolution=merge-duplicates"
            
            async with self.session.post(USERS_URL, json=data, headers=headers, timeout=5) as response:
                return response.status in [200, 201]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def get_all_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
        try:
            await self.init_session()
            params = {"select": "user_id"}
            
            async with self.session.get(USERS_URL, headers=self.headers, params=params, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    return [item['user_id'] for item in data]
                return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    async def load_user_autostocks(self, user_id: int) -> Set[str]:
        """–§–ò–ö–°: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º params"""
        try:
            await self.init_session()
            params = {"user_id": f"eq.{user_id}", "select": "item_name"}
            
            async with self.session.get(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    return {item['item_name'] for item in data}
                return set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤: {e}")
            return set()
    
    async def save_user_autostock(self, user_id: int, item_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∞–≤—Ç–æ—Å—Ç–æ–∫–∏"""
        try:
            await self.init_session()
            data = {"user_id": user_id, "item_name": item_name}
            
            async with self.session.post(AUTOSTOCKS_URL, json=data, headers=self.headers, timeout=5) as response:
                success = response.status in [200, 201]
                logger.info(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Å—Ç–æ–∫ '{item_name}' –¥–ª—è {user_id}: {response.status}")
                return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–æ–∫–∞: {e}")
            return False
    
    async def remove_user_autostock(self, user_id: int, item_name: str) -> bool:
        """
        –§–ò–ö–°: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º params –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ URL.
        –ü—Ä–∏–Ω–∏–º–∞–µ–º 200, 204 –∫–∞–∫ —É—Å–ø–µ—Ö.
        """
        try:
            await self.init_session()
            params = {"user_id": f"eq.{user_id}", "item_name": f"eq.{item_name}"}
            
            async with self.session.delete(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                success = response.status in [200, 204]
                status_text = await response.text()
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∞–≤—Ç–æ—Å—Ç–æ–∫ '{item_name}' –¥–ª—è {user_id}: {response.status} | {status_text[:100]}")
                return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–æ–∫–∞: {e}")
            return False
    
    async def get_users_tracking_item(self, item_name: str) -> List[int]:
        """–§–ò–ö–°: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º params"""
        try:
            await self.init_session()
            params = {"item_name": f"eq.{item_name}", "select": "user_id"}
            
            async with self.session.get(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    return [item['user_id'] for item in data]
                return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []


class StockTracker:
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.is_running = False
        self.db = SupabaseDB()

    async def init_session(self):
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()

    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
        await self.db.close_session()

    async def fetch_supabase_api(self, url: str) -> Optional[List[Dict]]:
        """–ó–∞–ø—Ä–æ—Å –∫ API —Å—Ç–æ–∫–∞"""
        try:
            await self.init_session()
            headers = {
                "apikey": SUPABASE_API_KEY_STOCK,
                "Authorization": f"Bearer {SUPABASE_API_KEY_STOCK}"
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å —Å—Ç–æ–∫–∞: {url[:80]}...")
            
            async with self.session.get(url, headers=headers, timeout=10) as response:
                logger.info(f"üìä –û—Ç–≤–µ—Ç: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    return data
                else:
                    text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {text[:200]}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–æ–∫–∞: {e}")
            return None

    async def fetch_stock(self, use_cache: bool = True) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        global stock_cache, stock_cache_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if use_cache and stock_cache and stock_cache_time:
            now = get_moscow_time()
            if (now - stock_cache_time).total_seconds() < STOCK_CACHE_SECONDS:
                logger.info("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à")
                return stock_cache
        
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–∫")
            seeds_data, gear_data = await asyncio.gather(
                self.fetch_supabase_api(SEEDS_API_URL),
                self.fetch_supabase_api(GEAR_API_URL)
            )
            
            if seeds_data is None and gear_data is None:
                logger.error("‚ùå –û–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–Ω—É–ª–∏ None")
                return None
            
            combined_data = []
            if seeds_data:
                combined_data.extend(seeds_data)
            if gear_data:
                combined_data.extend(gear_data)
            
            result = {"data": combined_data}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            stock_cache = result
            stock_cache_time = get_moscow_time()
            logger.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(combined_data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fetch_stock: {e}")
            return None

    async def fetch_weather(self) -> Optional[Dict]:
        try:
            weather_data = await self.fetch_supabase_api(WEATHER_API_URL)
            if weather_data and len(weather_data) > 0:
                return weather_data[0]
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fetch_weather: {e}")
            return None

    def format_weather_message(self, weather_data: Optional[Dict]) -> str:
        if not weather_data:
            return "üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n_–°–µ–π—á–∞—Å –æ–±—ã—á–Ω–∞—è –ø–æ–≥–æ–¥–∞_"
        
        weather_id = weather_data.get('item_id', '')
        ends_at_str = weather_data.get('ends_at', '')
        
        weather_info = WEATHER_DATA.get(weather_id, {"emoji": "üå§Ô∏è", "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"})
        emoji = weather_info['emoji']
        name = weather_info['name']
        
        try:
            current_time = get_moscow_time()
            
            if ends_at_str:
                ends_at = datetime.fromisoformat(ends_at_str.replace('Z', '+00:00'))
                ends_at_msk = ends_at.astimezone(pytz.timezone('Europe/Moscow'))
                
                if ends_at_msk > current_time:
                    time_left = ends_at_msk - current_time
                    minutes_left = int(time_left.total_seconds() / 60)
                    ends_time = ends_at_msk.strftime("%H:%M")
                    
                    return (
                        f"üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n"
                        f"{emoji} *{name} –ø–æ–≥–æ–¥–∞*\n\n"
                        f"‚è∞ –ó–∞–∫–æ–Ω—á–∏—Ç—Å—è: {ends_time} –ú–°–ö\n"
                        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ~{minutes_left} –º–∏–Ω"
                    )
                else:
                    return "üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n_–°–µ–π—á–∞—Å –æ–±—ã—á–Ω–∞—è –ø–æ–≥–æ–¥–∞_"
            else:
                return (
                    f"üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n"
                    f"{emoji} *{name} –ø–æ–≥–æ–¥–∞*\n\n"
                    f"_–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ_"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return f"üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n{emoji} *{name} –ø–æ–≥–æ–¥–∞*"

    def format_stock_message(self, stock_data: Dict) -> str:
        if not stock_data or 'data' not in stock_data:
            return "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ*"

        seeds = []
        gear = []

        for item in stock_data['data']:
            display_name = item.get('display_name', '')
            multiplier = item.get('multiplier', 0)
            item_type = item.get('type', '')

            if not display_name or multiplier == 0:
                continue

            item_info = ITEMS_DATA.get(display_name, {"emoji": "üì¶", "price": "Unknown"})
            formatted_item = f"{item_info['emoji']} *{display_name}*: x{multiplier} ({item_info['price']})"

            if item_type == 'seeds':
                seeds.append(formatted_item)
            elif item_type == 'gear':
                gear.append(formatted_item)

        message = "üìä *–¢–ï–ö–£–©–ò–ô –°–¢–û–ö*\n\n"
        message += "üå± *–°–ï–ú–ï–ù–ê:*\n" + ("\n".join(seeds) if seeds else "_–ü—É—Å—Ç–æ_") + "\n\n"
        message += "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:*\n" + ("\n".join(gear) if gear else "_–ü—É—Å—Ç–æ_") + "\n\n"

        current_time = get_moscow_time().strftime("%H:%M:%S")
        message += f"üïí _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} –ú–°–ö_"
        return message

    def can_send_notification(self, item_name: str) -> bool:
        if item_name not in last_notification_time:
            return True
        
        now = get_moscow_time()
        last_time = last_notification_time[item_name]
        return (now - last_time).total_seconds() >= NOTIFICATION_COOLDOWN

    async def check_for_notifications(self, stock_data: Dict, bot: Bot, channel_id: str):
        global last_stock_state
        if not stock_data or 'data' not in stock_data or not channel_id:
            return

        current_stock = {}
        for item in stock_data['data']:
            display_name = item.get('display_name', '')
            multiplier = item.get('multiplier', 0)
            if display_name and multiplier > 0:
                current_stock[display_name] = multiplier

        for item_name in NOTIFICATION_ITEMS:
            current_count = current_stock.get(item_name, 0)
            previous_count = last_stock_state.get(item_name, 0)
            
            should_notify = False
            if current_count > 0 and (previous_count == 0 or current_count > previous_count):
                should_notify = True
            
            if should_notify and self.can_send_notification(item_name):
                await self.send_notification(bot, channel_id, item_name, current_count)

        last_stock_state = current_stock.copy()

    async def check_user_autostocks(self, stock_data: Dict, bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not stock_data or 'data' not in stock_data:
            return

        current_stock = {}
        for item in stock_data['data']:
            display_name = item.get('display_name', '')
            multiplier = item.get('multiplier', 0)
            if display_name and multiplier > 0:
                current_stock[display_name] = multiplier

        tasks = []
        for item_name, count in current_stock.items():
            users = await self.db.get_users_tracking_item(item_name)
            for user_id in users:
                tasks.append(self.send_autostock_notification(bot, user_id, item_name, count))
        
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    async def send_notification(self, bot: Bot, channel_id: str, item_name: str, count: int):
        try:
            item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
            current_time = get_moscow_time().strftime("%H:%M:%S")

            message = (
                f"üö® *–†–ï–î–ö–ò–ô –ü–†–ï–î–ú–ï–¢ –í –°–¢–û–ö–ï!* üö®\n\n"
                f"{item_info['emoji']} *{item_name}*\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{count}*\n"
                f"üí∞ –¶–µ–Ω–∞: {item_info['price']}\n"
                f"üïí {current_time} –ú–°–ö"
            )

            await bot.send_message(chat_id=channel_id, text=message, parse_mode=ParseMode.MARKDOWN)
            last_notification_time[item_name] = get_moscow_time()
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {item_name} x{count}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    async def send_autostock_notification(self, bot: Bot, user_id: int, item_name: str, count: int):
        try:
            item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
            current_time = get_moscow_time().strftime("%H:%M:%S")

            message = (
                f"üîî *–ê–í–¢–û–°–¢–û–ö - {item_name}!*\n\n"
                f"{item_info['emoji']} *{item_name}*\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{count}*\n"
                f"üí∞ –¶–µ–Ω–∞: {item_info['price']}\n"
                f"üïí {current_time} –ú–°–ö"
            )

            await bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.MARKDOWN)
        except:
            pass


tracker = StockTracker()


async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.effective_message:
        return
    
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await tracker.db.save_user(
        user_id, 
        update.effective_user.username, 
        update.effective_user.first_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
    can_execute, seconds_left = check_command_cooldown(user_id, 'stock')
    if not can_execute:
        await update.effective_message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –õ–°
    if update.effective_chat.type == ChatType.PRIVATE:
        if not await check_subscription(user_id, context.bot):
            keyboard = [[InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{REQUIRED_CHANNEL[1:]}")]]
            await update.effective_message.reply_text(
                f"‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {REQUIRED_CHANNEL}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
    
    stock_data = await tracker.fetch_stock(use_cache=True)
    message = tracker.format_stock_message(stock_data)
    await update.effective_message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.effective_message:
        return
    
    user_id = update.effective_user.id
    
    await tracker.db.save_user(
        user_id, 
        update.effective_user.username, 
        update.effective_user.first_name
    )
    
    can_execute, seconds_left = check_command_cooldown(user_id, 'weather')
    if not can_execute:
        await update.effective_message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
        )
        return
    
    if update.effective_chat.type == ChatType.PRIVATE:
        if not await check_subscription(user_id, context.bot):
            keyboard = [[InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{REQUIRED_CHANNEL[1:]}")]]
            await update.effective_message.reply_text(
                f"‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {REQUIRED_CHANNEL}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
    
    weather_data = await tracker.fetch_weather()
    message = tracker.format_weather_message(weather_data)
    await update.effective_message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


async def autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.effective_message:
        return
    
    if update.effective_chat.type != ChatType.PRIVATE:
        return
    
    user_id = update.effective_user.id
    
    await tracker.db.save_user(
        user_id, 
        update.effective_user.username, 
        update.effective_user.first_name
    )
    
    can_execute, seconds_left = check_command_cooldown(user_id, 'autostock')
    if not can_execute:
        await update.effective_message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
        )
        return
    
    if not await check_subscription(user_id, context.bot):
        keyboard = [[InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{REQUIRED_CHANNEL[1:]}")]]
        await update.effective_message.reply_text(
            f"‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {REQUIRED_CHANNEL}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = [
        [InlineKeyboardButton("üå± –°–µ–º–µ–Ω–∞", callback_data="as_seeds")],
        [InlineKeyboardButton("‚öîÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="as_gear")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–∏", callback_data="as_list")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ :15 —Å–µ–∫—É–Ω–¥"
    )
    
    await update.effective_message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)


async def autostock_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§–ò–ö–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ callbacks –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö ID.
    –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ editMessageReplyMarkup.
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    try:
        if data == "as_seeds":
            user_items = await tracker.db.load_user_autostocks(user_id)
            keyboard = []
            for item_name, item_info in ITEMS_DATA.items():
                if item_info['category'] == 'seed':
                    is_tracking = item_name in user_items
                    status = "‚úÖ" if is_tracking else "‚ûï"
                    # –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                    safe_callback = NAME_TO_ID.get(item_name, "invalid")
                    keyboard.append([InlineKeyboardButton(
                        f"{status} {item_info['emoji']} {item_name}",
                        callback_data=safe_callback
                    )])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="as_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            if keyboard and len(keyboard) > 0:
                await query.edit_message_text("üå± *–°–ï–ú–ï–ù–ê*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º—è–Ω", show_alert=True)
        
        elif data == "as_gear":
            user_items = await tracker.db.load_user_autostocks(user_id)
            keyboard = []
            for item_name, item_info in ITEMS_DATA.items():
                if item_info['category'] == 'gear':
                    is_tracking = item_name in user_items
                    status = "‚úÖ" if is_tracking else "‚ûï"
                    # –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                    safe_callback = NAME_TO_ID.get(item_name, "invalid")
                    keyboard.append([InlineKeyboardButton(
                        f"{status} {item_info['emoji']} {item_name}",
                        callback_data=safe_callback
                    )])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="as_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if keyboard and len(keyboard) > 0:
                await query.edit_message_text("‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è", show_alert=True)
        
        elif data == "as_list":
            user_items = await tracker.db.load_user_autostocks(user_id)
            if not user_items:
                message = "üìã *–ú–û–ò –ê–í–¢–û–°–¢–û–ö–ò*\n\n_–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤_"
            else:
                items_list = []
                for item_name in user_items:
                    item_info = ITEMS_DATA.get(item_name, {"emoji": "üì¶", "price": "Unknown"})
                    items_list.append(f"{item_info['emoji']} *{item_name}* ({item_info['price']})")
                message = f"üìã *–ú–û–ò –ê–í–¢–û–°–¢–û–ö–ò*\n\n" + "\n".join(items_list)
            
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="as_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
        elif data == "as_back":
            keyboard = [
                [InlineKeyboardButton("üå± –°–µ–º–µ–Ω–∞", callback_data="as_seeds")],
                [InlineKeyboardButton("‚öîÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="as_gear")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–∏", callback_data="as_list")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message = "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
        elif data.startswith("t_"):
            # –§–ò–ö–°: –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
            item_name = ID_TO_NAME.get(data)
            if not item_name:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback ID: {data}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            category = ITEMS_DATA.get(item_name, {}).get('category', 'seed')
            
            user_items = await tracker.db.load_user_autostocks(user_id)
            
            # –§–ò–ö–°: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏
            if item_name in user_items:
                await tracker.db.remove_user_autostock(user_id, item_name)
                logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª '{item_name}' –∏–∑ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤")
            else:
                await tracker.db.save_user_autostock(user_id, item_name)
                logger.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª '{item_name}' –≤ –∞–≤—Ç–æ—Å—Ç–æ–∫–∏")
            
            user_items = await tracker.db.load_user_autostocks(user_id)
            keyboard = []
            for name, info in ITEMS_DATA.items():
                if info['category'] == category:
                    is_tracking = name in user_items
                    status = "‚úÖ" if is_tracking else "‚ûï"
                    safe_callback = NAME_TO_ID.get(name, "invalid")
                    keyboard.append([InlineKeyboardButton(
                        f"{status} {info['emoji']} {name}",
                        callback_data=safe_callback
                    )])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="as_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–ò–ö–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                if reply_markup.inline_keyboard and len(reply_markup.inline_keyboard) > 0:
                    await query.edit_message_reply_markup(reply_markup=reply_markup)
                    logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=False)
            except TelegramError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ editMessageReplyMarkup: {e}")
                # –§–ò–ö–°: Fallback - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                try:
                    category_text = "üå± *–°–ï–ú–ï–ù–ê*" if category == "seed" else "‚öîÔ∏è *–°–ù–ê–†–Ø–ñ–ï–ù–ò–ï*"
                    await query.edit_message_text(
                        f"{category_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã:",
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    logger.info(f"‚úÖ Fallback: –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                except TelegramError as e2:
                    logger.error(f"‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {e2}")
                    # –§–ò–ö–°: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–≤–µ—Ç–∏–º —é–∑–µ—Ä—É
                    if "message to edit not found" in str(e2).lower():
                        await query.answer("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /autostock –¥–ª—è –Ω–∞—á–∞–ª–∞.", show_alert=True)
                    else:
                        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e2)[:50]}", show_alert=False)
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ autostock_callback: {e}", exc_info=True)
        try:
            await query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=False)
        except:
            pass


# ============ ADMIN - BROADCAST ============

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not update.effective_user or not update.effective_message:
        return
    
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        return
    
    if update.effective_chat.type != ChatType.PRIVATE:
        await update.effective_message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°")
        return
    
    await update.effective_message.reply_text(
        "üì¢ *–†–ê–°–°–´–õ–ö–ê –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode=ParseMode.MARKDOWN
    )
    
    return BROADCAST_MESSAGE


async def broadcast_message_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not update.effective_user or not update.effective_message or not update.message:
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        return ConversationHandler.END
    
    message_text = update.message.text
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="bc_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="bc_cancel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    context.user_data['broadcast_text'] = message_text
    
    await update.effective_message.reply_text(
        f"üìù *–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –°–û–û–ë–©–ï–ù–ò–Ø:*\n\n{message_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ConversationHandler.END


async def broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        return
    
    data = query.data
    
    if data == "bc_cancel":
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    if data == "bc_confirm":
        broadcast_text = context.user_data.get('broadcast_text')
        
        if not broadcast_text:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await query.edit_message_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        users = await tracker.db.get_all_users()
        
        if not users:
            await query.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        sent = 0
        failed = 0
        
        for user_id_to_send in users:
            try:
                await context.bot.send_message(
                    chat_id=user_id_to_send,
                    text=broadcast_text,
                    parse_mode=ParseMode.MARKDOWN
                )
                sent += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                failed += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id_to_send}: {e}")
        
        report = (
            f"‚úÖ *–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê*\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )
        
        await query.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if not update.effective_message:
        return ConversationHandler.END
    
    await update.effective_message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_message or not update.effective_user:
        return
    
    await tracker.db.save_user(
        update.effective_user.id, 
        update.effective_user.username, 
        update.effective_user.first_name
    )
    
    channel_info = f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}" if CHANNEL_ID else ""
    welcome_message = (
        "üëã *Plants vs Brainrots Stock Tracker!*\n\n"
        "üìä /stock - –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "üå§Ô∏è /weather - –ü–æ–≥–æ–¥–∞ –≤ –∏–≥—Ä–µ\n"
        "üîî /autostock - –ê–≤—Ç–æ—Å—Ç–æ–∫–∏\n"
        "‚ùì /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        f"{channel_info}\n"
        "üì¶ *–†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n"
        "‚Ä¢ ü•ï Mr Carrot\n"
        "‚Ä¢ üçÖ Tomatrio\n"
        "‚Ä¢ üçÑ Shroombino\n"
        "‚Ä¢ ü•≠ Mango"
    )
    await update.effective_message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_message:
        return
    
    help_message = (
        "üìö *–ö–û–ú–ê–ù–î–´:*\n\n"
        "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/stock - –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "/weather - –ü–æ–≥–æ–¥–∞ –≤ –∏–≥—Ä–µ\n"
        "/autostock - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Å—Ç–æ–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ :15 —Å–µ–∫—É–Ω–¥\n"
        f"üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {REQUIRED_CHANNEL}"
    )
    await update.effective_message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)


async def periodic_stock_check(application: Application):
    if tracker.is_running:
        return
    
    tracker.is_running = True
    logger.info("üöÄ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    initial_sleep = calculate_sleep_time()
    await asyncio.sleep(initial_sleep)

    while tracker.is_running:
        try:
            now = get_moscow_time()
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ - {now.strftime('%H:%M:%S')}")
            
            stock_data = await tracker.fetch_stock(use_cache=False)
            
            if stock_data:
                if CHANNEL_ID:
                    await tracker.check_for_notifications(stock_data, application.bot, CHANNEL_ID)
                await tracker.check_user_autostocks(stock_data, application.bot)
            
            sleep_time = calculate_sleep_time()
            await asyncio.sleep(sleep_time)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            await asyncio.sleep(calculate_sleep_time())


async def post_init(application: Application):
    asyncio.create_task(periodic_stock_check(application))


flask_app = Flask(__name__)


@flask_app.route("/", methods=["GET", "HEAD"])
@flask_app.route("/ping", methods=["GET", "HEAD"])
def ping():
    if flask_request.method == "HEAD":
        return "", 200
    
    now = get_moscow_time()
    next_check = get_next_check_time()
    
    return jsonify({
        "status": "ok",
        "time": datetime.utcnow().isoformat() + "Z",
        "moscow_time": now.strftime("%H:%M:%S"),
        "next_check": next_check.strftime("%H:%M:%S"),
        "bot": "PVB Stock Tracker",
        "is_running": tracker.is_running
    }), 200


@flask_app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "healthy", "running": tracker.is_running}), 200


def main():
    logger.info("="*60)
    logger.info("üå± Plants vs Brainrots Stock Tracker Bot")
    logger.info("="*60)

    # –§–ò–ö–°: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö ID –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    build_item_id_mappings()

    global telegram_app
    telegram_app = Application.builder().token(BOT_TOKEN).build()

    telegram_app.add_handler(CommandHandler("start", start_command))
    telegram_app.add_handler(CommandHandler("stock", stock_command))
    telegram_app.add_handler(CommandHandler("weather", weather_command))
    telegram_app.add_handler(CommandHandler("autostock", autostock_command))
    telegram_app.add_handler(CommandHandler("help", help_command))
    
    broadcast_handler = ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_command)],
        states={
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message_received)]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)]
    )
    telegram_app.add_handler(broadcast_handler)
    
    telegram_app.add_handler(CallbackQueryHandler(autostock_callback, pattern="^as_|^t_"))
    telegram_app.add_handler(CallbackQueryHandler(broadcast_callback, pattern="^bc_"))

    telegram_app.post_init = post_init

    async def shutdown_callback(app: Application):
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        tracker.is_running = False
        try:
            await tracker.close_session()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

    telegram_app.post_shutdown = shutdown_callback

    logger.info("üîÑ –†–µ–∂–∏–º: Polling")
    
    import threading
    
    def run_flask_server():
        port = int(os.getenv("PORT", "5000"))
        logger.info(f"üöÄ Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        import logging as flask_logging
        flask_log = flask_logging.getLogger('werkzeug')
        flask_log.setLevel(flask_logging.ERROR)
        flask_app.run(host="0.0.0.0", port=port, threaded=True, use_reloader=False)
    
    flask_thread = threading.Thread(target=run_flask_server, daemon=True)
    flask_thread.start()
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üë§ Admin ID: {ADMIN_ID}")
    logger.info("="*60)
    telegram_app.run_polling(allowed_updates=None, drop_pending_updates=True)


if __name__ == "__main__":
    main()